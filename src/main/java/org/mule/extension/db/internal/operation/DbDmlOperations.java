/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.extension.db.internal.operation;

import org.mule.db.commons.AbstractDbConnector;
import org.mule.db.commons.internal.domain.connection.DbConnection;
import org.mule.db.commons.internal.domain.metadata.QuerySingleMetadataResolver;
import org.mule.db.commons.internal.domain.metadata.SelectMetadataResolver;
import org.mule.db.commons.internal.domain.metadata.StoredProcedureMetadataResolver;
import org.mule.db.commons.internal.operation.DmlOperations;
import org.mule.db.commons.internal.operation.OperationErrorTypeProvider;
import org.mule.extension.db.api.StatementResult;
import org.mule.extension.db.api.param.QueryDefinition;
import org.mule.extension.db.api.param.StoredProcedureCall;
import org.mule.extension.db.internal.domain.autogeneratedkey.DbAutoGenerateKeysAttributes;
import org.mule.runtime.api.lifecycle.Initialisable;
import org.mule.runtime.api.lifecycle.InitialisationException;
import org.mule.runtime.extension.api.annotation.Streaming;
import org.mule.runtime.extension.api.annotation.error.Throws;
import org.mule.runtime.extension.api.annotation.metadata.OutputResolver;
import org.mule.runtime.extension.api.annotation.param.Config;
import org.mule.runtime.extension.api.annotation.param.Connection;
import org.mule.runtime.extension.api.annotation.param.ParameterGroup;
import org.mule.runtime.extension.api.annotation.param.display.Placement;
import org.mule.runtime.extension.api.runtime.operation.FlowListener;
import org.mule.runtime.extension.api.runtime.streaming.PagingProvider;
import org.mule.runtime.extension.api.runtime.streaming.StreamingHelper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import static org.mule.db.commons.internal.domain.autogeneratedkey.AutoGenerateKeysAttributes.AUTO_GENERATE_KEYS;
import static org.mule.db.commons.internal.operation.BaseDbOperations.QUERY_GROUP;
import static org.mule.extension.db.internal.util.MigrationUtils.mapQueryDefinition;
import static org.mule.extension.db.internal.util.MigrationUtils.mapStoredProcedureCall;
import static org.mule.runtime.extension.api.annotation.param.display.Placement.ADVANCED_TAB;

/**
 * Contains a set of operations for performing single statement DML operations
 *
 * @since 1.0
 */
@Throws(OperationErrorTypeProvider.class)
public class DbDmlOperations implements Initialisable {

  private DmlOperations dmlOperations;

  @Override
  public void initialise() throws InitialisationException {
    dmlOperations = new DmlOperations.Builder().build();
  }

  /**
   * Selects data from a database.
   *
   * Streaming is automatically applied to avoid preemptive consumption of such results, which may lead
   * to performance and memory issues.
   *
   * @param query     a {@link QueryDefinition} as a parameter group
   * @param connector the acting connector
   * @return depending on the value of {@code streaming}, it can be a {@link List} or {@link Iterator} of maps
   * @throws SQLException if an error is produced
   */
  @OutputResolver(output = SelectMetadataResolver.class)
  public PagingProvider<DbConnection, Map<String, Object>> select(
                                                                  @ParameterGroup(name = QUERY_GROUP) @Placement(
                                                                      tab = ADVANCED_TAB) QueryDefinition query,
                                                                  @Config AbstractDbConnector connector,
                                                                  StreamingHelper streamingHelper,
                                                                  FlowListener flowListener)
      throws SQLException {
    return dmlOperations.select(mapQueryDefinition(query), connector, streamingHelper, flowListener);
  }

  /**
   * Selects single result from a database. If the indicated SQL query returns more than one record, only the first one is returned.
   *
   * Streaming is not used for this operation, which means that you must be careful because all selected fields will be loaded to memory.
   *
   * @param query a {@link QueryDefinition} as a parameter group
   * @param connector the acting connector
   * @param connection the acting connection
   * @return a map with a single entry containing the operation's output
   * @throws SQLException if an error is produced
   *
   * @since 1.9.0
   */
  @OutputResolver(output = QuerySingleMetadataResolver.class)
  public Map<String, Object> querySingle(@ParameterGroup(name = QUERY_GROUP) @Placement(
      tab = ADVANCED_TAB) QueryDefinition query, @Config AbstractDbConnector connector, @Connection DbConnection connection,
                                         StreamingHelper streamingHelper)
      throws SQLException {
    return dmlOperations.querySingle(mapQueryDefinition(query), connector, connection, streamingHelper);
  }

  /**
   * Inserts data into a Database
   *
   * @param query                      {@link QueryDefinition} as a parameter group
   * @param autoGenerateKeysAttributes an {@link DbAutoGenerateKeysAttributes} as a parameter group
   * @param connector                  the acting connector
   * @param connection                 the acting connection
   * @return a {@link StatementResult}
   * @throws SQLException if an error is produced
   */
  public StatementResult insert(@ParameterGroup(name = QUERY_GROUP) @Placement(tab = ADVANCED_TAB) QueryDefinition query,
                                @ParameterGroup(
                                    name = AUTO_GENERATE_KEYS) DbAutoGenerateKeysAttributes autoGenerateKeysAttributes,
                                @Config AbstractDbConnector connector,
                                @Connection DbConnection connection,
                                StreamingHelper streamingHelper)
      throws SQLException {
    return new StatementResult(dmlOperations.insert(mapQueryDefinition(query), autoGenerateKeysAttributes, connector, connection,
                                                    streamingHelper));
  }

  /**
   * Updates data in a database.
   *
   * @param query                      {@link QueryDefinition} as a parameter group
   * @param autoGenerateKeysAttributes an {@link DbAutoGenerateKeysAttributes} as a parameter group
   * @param connector                  the acting connector
   * @param connection                 the acting connection
   * @return a {@link StatementResult}
   * @throws SQLException if an error is produced
   */
  public StatementResult update(@ParameterGroup(name = QUERY_GROUP) QueryDefinition query,
                                @ParameterGroup(
                                    name = AUTO_GENERATE_KEYS) DbAutoGenerateKeysAttributes autoGenerateKeysAttributes,
                                @Config AbstractDbConnector connector,
                                @Connection DbConnection connection,
                                StreamingHelper streamingHelper)
      throws SQLException {
    return new StatementResult(dmlOperations.update(mapQueryDefinition(query), autoGenerateKeysAttributes, connector, connection,
                                                    streamingHelper));
  }

  /**
   * Deletes data in a database.
   *
   * @param query      {@link QueryDefinition} as a parameter group
   * @param connector  the acting connector
   * @param connection the acting connection
   * @return the number of affected rows
   * @throws SQLException if an error is produced
   */
  public int delete(@ParameterGroup(name = QUERY_GROUP) QueryDefinition query,
                    @Config AbstractDbConnector connector,
                    @Connection DbConnection connection,
                    StreamingHelper streamingHelper)
      throws SQLException {
    return dmlOperations.delete(mapQueryDefinition(query), connector, connection, streamingHelper);
  }

  /**
   * Invokes a Stored Procedure on the database.
   * <p>
   * When the stored procedure returns one or more {@link ResultSet} instances, streaming
   * is automatically applied to avoid preemptive consumption of such results, which may lead
   * to performance and memory issues.
   *
   * @param call       a {@link StoredProcedureCall} as a parameter group
   * @param connector  the acting connector
   * @param connection the acting connection
   * @return A {@link Map} with the procedure's output
   * @throws SQLException if an error is produced
   */
  // TODO NMZ DBCON-249 return a paging provider and remove @Streaming Annotation.
  @Streaming
  @OutputResolver(output = StoredProcedureMetadataResolver.class)
  public Map<String, Object> storedProcedure(@ParameterGroup(name = QUERY_GROUP) StoredProcedureCall call,
                                             @ParameterGroup(
                                                 name = AUTO_GENERATE_KEYS) DbAutoGenerateKeysAttributes autoGenerateKeysAttributes,
                                             @Config AbstractDbConnector connector,
                                             @Connection DbConnection connection,
                                             StreamingHelper streamingHelper,
                                             FlowListener flowListener)
      throws SQLException {
    return dmlOperations.storedProcedure(mapStoredProcedureCall(call), autoGenerateKeysAttributes, connector, connection,
                                         streamingHelper, flowListener);
  }
}
