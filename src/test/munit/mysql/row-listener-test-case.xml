<?xml version="1.0" encoding="UTF-8"?>


<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns:mtf="http://www.mulesoft.org/schema/mule/mtf"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
		http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
		http://www.mulesoft.org/schema/mule/mtf http://www.mulesoft.org/schema/mule/mtf/current/mule-mtf.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
    <munit:config name="row-listener-test-case.xml"/>

    <vm:config name="VM_Config">
        <vm:queues>
            <vm:queue queueName="rowListenerQueueNumber" queueType="PERSISTENT"/>
            <vm:queue queueName="rowListenerQueueTimestamp" queueType="PERSISTENT"/>
            <vm:queue queueName="rowListenerQueueTimeout" queueType="PERSISTENT"/>
            <vm:queue queueName="rowListenerQueueWithoutIdColumn" queueType="PERSISTENT"/>
            <vm:queue queueName="rowListenerQueueWithoutWatermark" queueType="PERSISTENT"/>
        </vm:queues>
    </vm:config>
    <munit:before-test name="SetUpRowListenerTestCase" description="Create car2 table with 3 rows">
        <db:execute-ddl config-ref="dbConfigMySQL" transactionalAction="NOT_SUPPORTED">
            <db:sql>
                <![CDATA[CREATE TABLE IF NOT EXISTS PLANET_LISTENER(ID INTEGER NOT NULL AUTO_INCREMENT,POSITION INTEGER,NAME VARCHAR(255), PICTURE BLOB, DESCRIPTION LONGTEXT, PRIMARY KEY (ID))]]>
            </db:sql>
        </db:execute-ddl>
    </munit:before-test>

    <flow name="OnNewRowWithIntegerWatermarkTestCaseFlow">
        <db:listener config-ref="dbConfigMySQL"
                     watermarkColumn="id" idColumn="id" table="PLANET_LISTENER">
            <scheduling-strategy>
                <fixed-frequency frequency="100"/>
            </scheduling-strategy>
        </db:listener>
        <vm:publish-consume config-ref="VM_Config"
                            queueName="rowListenerQueueNumber"/>
    </flow>
    <munit:test name="whenThereAreNewIntegerWatermarks_thenAllRowsAreReturned" description="MUnit Test">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="OnNewRowWithIntegerWatermarkTestCaseFlow"/>
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value='#[%dw 2.0
            output application/json
            ---
            [{name: "Mars", position: 0}]]'
            />
            <db:bulk-insert config-ref="dbConfigMySQL">
                <db:sql>
                    <![CDATA[INSERT INTO PLANET_LISTENER(POSITION, NAME) VALUES (:position, :name)]]>
                </db:sql>
            </db:bulk-insert>
        </munit:behavior>
        <munit:execution>
            <until-successful maxRetries="5"
                              millisBetweenRetries="50">
                <vm:consume config-ref="VM_Config"
                            queueName="rowListenerQueueNumber" timeoutUnit="MILLISECONDS" timeout="200"/>
            </until-successful>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert>
                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts
 ---
payload must [
	$."name" must equalTo("Mars"),
	$."position" must equalTo(0),
]]]]></munit-tools:that>
            </munit-tools:assert>
        </munit:validation>
    </munit:test>

    <!--    <flow name="OnNewRowWithIntegerWatermarkAndNoIdColumnTestCaseFlow" doc:id="466b4c49-840e-4670-94a9-cfcee9688d5b">-->
    <!--        <db:listener config-ref="dbConfigMySQL"-->
    <!--                         watermarkColumn="id" table="car2">-->
    <!--            <scheduling-strategy>-->
    <!--                <fixed-frequency frequency="100"/>-->
    <!--            </scheduling-strategy>-->
    <!--        </db:listener>-->
    <!--        <vm:publish-consume config-ref="VM_Config"-->
    <!--                            queueName="rowListenerQueueWithoutIdColumn"/>-->
    <!--    </flow>-->
    <!--    <munit:test name="whenIdColumnIsNotSet_thenShouldWorkAnyway" description="MUnit Test">-->
    <!--        <munit:enable-flow-sources>-->
    <!--            <munit:enable-flow-source value="OnNewRowWithIntegerWatermarkAndNoIdColumnTestCaseFlow"/>-->
    <!--        </munit:enable-flow-sources>-->
    <!--        <munit:behavior>-->
    <!--            <db:insert config-ref="dbConfigMySQL">-->
    <!--                <db:sql>-->
    <!--                    <![CDATA[INSERT INTO car2(id, brand, model, year, color, creation_date) VALUES (1, 'BMW', 'X1', '2020', 'black', '2021-11-29 09:00:00.000')]]></db:sql>-->
    <!--            </db:insert>-->
    <!--        </munit:behavior>-->
    <!--        <munit:execution>-->
    <!--            <until-successful maxRetries="5" doc:name="Until Successful" doc:id="59fdaecd-240e-43ec-9121-5124ead64cdb"-->
    <!--                              millisBetweenRetries="50">-->
    <!--                <vm:consume config-ref="VM_Config"-->
    <!--                            queueName="rowListenerQueueWithoutIdColumn" timeoutUnit="MILLISECONDS" timeout="200"/>-->
    <!--            </until-successful>-->
    <!--        </munit:execution>-->
    <!--        <munit:validation>-->
    <!--            <munit-tools:assert>-->
    <!--                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts-->
    <!-- -&#45;&#45;-->
    <!--payload must [-->
    <!--	$."id" must equalTo(1),-->
    <!--	$."brand" must equalTo("BMW"),-->
    <!--	$."model" must equalTo("X1"),-->
    <!--	$."year" must equalTo("2020"),-->
    <!--	$."color" must equalTo("black"),-->
    <!--	$."creation_date" must notBeNull(),-->
    <!--]]]]></munit-tools:that>-->
    <!--            </munit-tools:assert>-->
    <!--        </munit:validation>-->
    <!--    </munit:test>-->


    <!--    <flow name="OnNewRowWithNoWatermarkTestCaseFlow" doc:id="466b4c49-840e-4670-94a9-cfcee9688d6c">-->
    <!--        <db:listener config-ref="dbConfigMySQL"-->
    <!--                         watermarkColumn="creation_date" table="car2">-->
    <!--            <scheduling-strategy>-->
    <!--                <fixed-frequency frequency="100"/>-->
    <!--            </scheduling-strategy>-->
    <!--        </db:listener>-->
    <!--        <vm:publish-consume config-ref="VM_Config"-->
    <!--                            queueName="rowListenerQueueWithoutWatermark"/>-->
    <!--    </flow>-->
    <!--    <munit:test name="whenWatermarkIsNotInserted_thenShouldWorkAnyway" description="MUnit Test"-->
    <!--                expectedException="org.mule.runtime.api.exception.MuleRuntimeException"-->
    <!--                expectedErrorDescription="Tried to consume messages from VM queue 'rowListenerQueueWithoutWatermark' but it was empty after timeout of 200 MILLISECONDS">-->
    <!--        <munit:enable-flow-sources>-->
    <!--            <munit:enable-flow-source value="OnNewRowWithNoWatermarkTestCaseFlow"/>-->
    <!--        </munit:enable-flow-sources>-->
    <!--        <munit:behavior>-->
    <!--            <db:insert config-ref="dbConfigMySQL">-->
    <!--                <db:sql>-->
    <!--                    <![CDATA[INSERT INTO car2(id, brand, model, year, color) VALUES (1, 'BMW', 'X1', '2020', 'black')]]></db:sql>-->
    <!--            </db:insert>-->
    <!--        </munit:behavior>-->
    <!--        <munit:execution>-->
    <!--            <vm:consume config-ref="VM_Config"-->
    <!--                        queueName="rowListenerQueueWithoutWatermark" timeoutUnit="MILLISECONDS" timeout="200"/>-->
    <!--        </munit:execution>-->
    <!--    </munit:test>-->

    <!--    <flow name="OnNewRowWithDateTimeWatermarkTestCaseFlow" doc:id="4002fe26-f463-417b-ac49-5c6d67f497de">-->
    <!--        <db:listener table="car2"-->
    <!--                         config-ref="dbConfigMySQL" watermarkColumn="creation_date" idColumn="id" fetchSize="10">-->
    <!--            <scheduling-strategy>-->
    <!--                <fixed-frequency frequency="100"/>-->
    <!--            </scheduling-strategy>-->
    <!--        </db:listener>-->
    <!--        <vm:publish-consume config-ref="VM_Config"-->
    <!--                            queueName="rowListenerQueueTimestamp"/>-->
    <!--    </flow>-->
    <!--    <munit:test name="whenThereAreNewDateWatermarks_thenAllRowsAreReturned"-->
    <!--                description="MUnit Test">-->
    <!--        <munit:enable-flow-sources>-->
    <!--            <munit:enable-flow-source value="OnNewRowWithDateTimeWatermarkTestCaseFlow"/>-->
    <!--        </munit:enable-flow-sources>-->
    <!--        <munit:behavior>-->
    <!--            <db:insert config-ref="dbConfigMySQL">-->
    <!--                <db:sql>-->
    <!--                    <![CDATA[INSERT INTO car2(id, brand, model, year, color, creation_date) VALUES (2, 'AUDI', 'A4', '2019', 'black', '2019-12-31 09:00:00.000')]]></db:sql>-->
    <!--            </db:insert>-->
    <!--        </munit:behavior>-->
    <!--        <munit:execution>-->
    <!--            <until-successful maxRetries="5"-->
    <!--                              millisBetweenRetries="50">-->
    <!--                <vm:consume config-ref="VM_Config"-->
    <!--                            queueName="rowListenerQueueTimestamp" timeout="200" timeoutUnit="MILLISECONDS"/>-->
    <!--            </until-successful>-->
    <!--        </munit:execution>-->
    <!--        <munit:validation>-->
    <!--            <munit-tools:assert>-->
    <!--                <munit-tools:that><![CDATA[#[import * from dw::test::Asserts-->
    <!-- -&#45;&#45;-->
    <!--payload must [-->
    <!--	$."id" must equalTo(2),-->
    <!--	$."brand" must equalTo("AUDI"),-->
    <!--	$."model" must equalTo("A4"),-->
    <!--	$."year" must equalTo("2019"),-->
    <!--	$."color" must equalTo("black"),-->
    <!--	$."creation_date" must notBeNull(),-->
    <!--]]]]></munit-tools:that>-->
    <!--            </munit-tools:assert>-->
    <!--        </munit:validation>-->
    <!--    </munit:test>-->

    <!--    <flow name="OnNewRowWithOldDateTimeWatermarkTestCaseFlow" doc:id="09c6b60f-e1a0-4033-9216-c94d7806144c">-->
    <!--        <db:listener config-ref="dbConfigMySQL"-->
    <!--                         table="car2" watermarkColumn="creation_date" idColumn="id" since="2021-12-14 00:00:00.000">-->
    <!--            <scheduling-strategy>-->
    <!--                <fixed-frequency frequency="100"/>-->
    <!--            </scheduling-strategy>-->
    <!--        </db:listener>-->
    <!--        <vm:publish-consume config-ref="VM_Config"-->
    <!--                            queueName="rowListenerQueueTimeout" timeout="1"/>-->
    <!--    </flow>-->
    <!--    <munit:test name="whenThereAreNewRowsWithAnOldWatermarks_thenRowsAreNotReturned" doc:id="b743559d-20bb-4adf-8c6d-a933cbd5486b"-->
    <!--                expectedErrorType="VM:EMPTY_QUEUE">-->
    <!--        <munit:enable-flow-sources>-->
    <!--            <munit:enable-flow-source value="OnNewRowWithOldDateTimeWatermarkTestCaseFlow"/>-->
    <!--        </munit:enable-flow-sources>-->
    <!--        <munit:behavior>-->
    <!--            <db:insert config-ref="dbConfigMySQL">-->
    <!--                <db:sql>-->
    <!--                    <![CDATA[INSERT INTO car2(id, brand, model, year, color, creation_date) VALUES (1, 'BMW', 'X1', '2020', 'black', '2021-12-10 00:00:00.000')]]></db:sql>-->
    <!--            </db:insert>-->
    <!--        </munit:behavior>-->
    <!--        <munit:execution>-->
    <!--            <vm:consume config-ref="VM_Config"-->
    <!--                        queueName="rowListenerQueueTimeout" timeout="1"/>-->
    <!--        </munit:execution>-->
    <!--    </munit:test>-->


    <munit:after-test name="afterTestOnNewRowTestCase" description="Delete car2 table">
        <db:execute-ddl config-ref="dbConfigMySQL" transactionalAction="NOT_SUPPORTED">
            <db:sql><![CDATA[DROP TABLE IF EXISTS car2]]></db:sql>
        </db:execute-ddl>
    </munit:after-test>
</mule>