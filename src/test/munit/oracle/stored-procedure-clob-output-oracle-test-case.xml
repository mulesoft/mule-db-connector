<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <munit:config name="stored-procedure-clob-output-oracle-test-case.xml" minMuleVersion="4.1.6"/>
    <munit:before-suite name="createStoreProcedure">
        <db:execute-ddl config-ref="oracleDbPoolingConfig" >
            <db:sql ><![CDATA[create or replace PROCEDURE myProcClobOut(myParam OUT CLOB) AS aClob CLOB;
BEGIN
  SELECT to_clob(1) into aClob FROM dual;
  myParam := aClob;
END;]]></db:sql>
        </db:execute-ddl>
        <db:execute-ddl config-ref="dbConfigWithPooling" >
            <db:sql ><![CDATA[CREATE OR REPLACE PACKAGE magicPackageVersionThree AS
                    PROCEDURE getClob(result OUT sys_refcursor);
                       TYPE CUSTOM_RECORD_TYPE IS RECORD(NUMBER_PARAM NUMBER);
                        TYPE CUSTOM_TYPE IS TABLE OF CUSTOM_RECORD_TYPE INDEX BY BINARY_INTEGER;
                        PROCEDURE procedure_with_in_out_param (CUSTOM_TYPE_PARAM     IN OUT  CUSTOM_TYPE);
                   END magicPackageVersionThree;]]></db:sql>
        </db:execute-ddl>
        <db:execute-ddl config-ref="dbConfigWithPooling" >
            <db:sql ><![CDATA[CREATE OR REPLACE PACKAGE BODY magicPackageVersionThree AS
                     PROCEDURE getClob(result OUT sys_refcursor) AS
                       BEGIN
                           Open result for
                               select to_clob(1) from dual;
                       END getClob;
                   PROCEDURE procedure_with_in_out_param (CUSTOM_TYPE_PARAM IN OUT CUSTOM_TYPE) AS
                          BEGIN
                          CUSTOM_TYPE_PARAM(2).NUMBER_PARAM := CUSTOM_TYPE_PARAM(0).NUMBER_PARAM;
                          CUSTOM_TYPE_PARAM(0).NUMBER_PARAM := 1;
                          CUSTOM_TYPE_PARAM(1).NUMBER_PARAM := 2;
                  END procedure_with_in_out_param;
           END magicPackageVersionThree;]]></db:sql>
        </db:execute-ddl>
    </munit:before-suite>
    <munit:test name="whenHavingOutClobConnectionNotLeaked" ignore="#[java!org::mule::extension::db::DbMunitUtils::isTestIgnored('oracle')]">
        <munit:execution>
            <db:stored-procedure config-ref="oracleDbPoolingConfig">
                <db:sql><![CDATA[call myProcClobOut(:clobdata)]]></db:sql>
                <db:output-parameters>
                    <db:output-parameter key="clobdata" type="CLOB" />
                </db:output-parameters>
            </db:stored-procedure>
            <ee:transform>
                <ee:message>
                    <ee:set-payload><![CDATA[%dw 2.0
                        output application/java
                        ---
                        payload[0]]]></ee:set-payload>
                </ee:message>
            </ee:transform>
            <db:stored-procedure config-ref="oracleDbPoolingConfig">
                <db:sql><![CDATA[call myProcClobOut(:clobdata)]]></db:sql>
                <db:output-parameters>
                    <db:output-parameter key="clobdata" type="CLOB" />
                </db:output-parameters>
            </db:stored-procedure>
            <ee:transform>
                <ee:message>
                    <ee:set-payload><![CDATA[%dw 2.0
                        output application/java
                        ---
                        payload[0]]]></ee:set-payload>
                </ee:message>
            </ee:transform>
        </munit:execution>
    </munit:test>

    <munit:test name="customInOutParameter" ignore="#[java!org::mule::extension::db::DbMunitUtils::isTestIgnored('oracle')]">
        <munit:execution>
            <ee:transform>
                <ee:message >
                    <ee:set-payload ><![CDATA[ %dw 2.0
                    output application/java
                    ---
                    CUSTOM_TYPE_PARAM: [ {
                            NUMBER_PARAM: 3
                    }
                    ]
                ]]></ee:set-payload>
                </ee:message>
            </ee:transform>
            <ee:transform>
                <ee:message >
                    <ee:set-payload ><![CDATA[%dw 2.0
                output application/java
                fun subOrderStruct(rec) = (
                    Db::prepareStruct("MAGICPACKAGEVERSIONTHREE.CUSTOM_RECORD_TYPE", [rec."NUMBER_PARAM" as Number]))

                fun subOrderMap(tab) = (
                  tab map ((item,index)-> subOrderStruct(item)))
                 ---
                Db::prepareArray( "MAGICPACKAGEVERSIONTHREE.CUSTOM_TYPE",subOrderMap(payload.CUSTOM_TYPE_PARAM default [{}]))
        ]]></ee:set-payload>
                </ee:message>
            </ee:transform>
            <db:stored-procedure config-ref="oracleDbPoolingConfig">
                <db:sql><![CDATA[{ call magicPackageVersionThree.procedure_with_in_out_param(:CUSTOM_TYPE_PARAM)]]></db:sql>
                <db:in-out-parameters >
                    <db:in-out-parameter key="CUSTOM_TYPE_PARAM" value="#[payload]" />
                </db:in-out-parameters>
                <db:output-parameters>
                </db:output-parameters>
            </db:stored-procedure>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-equals actual="#[sizeOf(payload.CUSTOM_TYPE_PARAM)]" expected="#[3]" />
            <munit-tools:assert-equals actual="#[payload.CUSTOM_TYPE_PARAM[0][0]]" expected="#[1]" />
            <munit-tools:assert-equals actual="#[payload.CUSTOM_TYPE_PARAM[1][0]]" expected="#[2]" />
            <munit-tools:assert-equals actual="#[payload.CUSTOM_TYPE_PARAM[2][0]]" expected="#[3]" />
        </munit:validation>
    </munit:test>

    <munit:test name="getCursorResultFromStoredProcedurePackage" ignore="#[java!org::mule::extension::db::DbMunitUtils::isTestIgnored('oracle')]">
        <munit:execution>
            <set-payload value="#[1 to 20]" />
            <foreach>
                <try transactionalAction="ALWAYS_BEGIN">
                    <db:stored-procedure transactionalAction="ALWAYS_JOIN"  config-ref="dbConfigWithPooling">
                        <db:sql>{ call magicPackageVersionThree.getClob(:sys_refcursor) }</db:sql>
                        <db:output-parameters>
                            <db:output-parameter key="sys_refcursor" customType="CURSOR" />
                        </db:output-parameters>
                    </db:stored-procedure>
                    <ee:transform>
                        <ee:message>
                            <ee:set-payload><![CDATA[%dw 2.0
                        output application/json
                        ---
                        payload[0]]]></ee:set-payload>
                        </ee:message>
                    </ee:transform>
                </try>
            </foreach>
            <set-payload value='#[%dw 2.0
output application/java
---
status: "OK"]'/>
        </munit:execution>
    </munit:test>

    <munit:test name="getClobResultFromStoredProcedurePackage" ignore="#[java!org::mule::extension::db::DbMunitUtils::isTestIgnored('oracle')]">
        <munit:execution>
            <set-payload value="#[1 to 20]" />
            <foreach>
                <try transactionalAction="ALWAYS_BEGIN">
                    <db:stored-procedure transactionalAction="ALWAYS_JOIN"  config-ref="dbConfigWithPooling">
                        <db:sql><![CDATA[call myProcClobOut(:clobdata)]]></db:sql>
                        <db:output-parameters>
                            <db:output-parameter key="clobdata" type="CLOB" />
                        </db:output-parameters>
                    </db:stored-procedure>
                    <ee:transform>
                        <ee:message>
                            <ee:set-payload><![CDATA[%dw 2.0
                        output application/json
                        ---
                        payload[0]]]></ee:set-payload>
                        </ee:message>
                    </ee:transform>
                </try>
            </foreach>
            <set-payload value='#[%dw 2.0
output application/java
---
status: "OK"]'/>
        </munit:execution>
    </munit:test>

    <munit:after-suite name="deleteStoreProcedure">
        <db:execute-script config-ref="oracleDbPoolingConfig">
            <db:sql ><![CDATA[drop procedure myProcClobOut;
drop package magicPackageVersionThree]]></db:sql>
        </db:execute-script>
    </munit:after-suite>
</mule>
