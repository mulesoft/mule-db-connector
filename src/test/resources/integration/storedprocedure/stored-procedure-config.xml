<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
            http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">

    <flow name="inOutParameterWithoutSpaceBeforeCall">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{call doubleMyInt(:myInt) }</db:sql>
            <db:in-out-parameters>
                <db:in-out-parameter key="myInt" value="3"/>
            </db:in-out-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="inOutParameter">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ call doubleMyInt(:myInt) }</db:sql>
            <db:in-out-parameters>
                <db:in-out-parameter key="myInt" value="3"/>
            </db:in-out-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="outParam">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ CALL countTestRecords(:count) }</db:sql>
            <db:output-parameters>
                <db:output-parameter key="count"/>
            </db:output-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="multiplyInts">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ call multiplyInts(:int1, :int2, :result1, :int3, :result2) }</db:sql>
            <db:input-parameters>
                #[{
                    'int1' : 3,
                    'int2' : 4,
                    'int3' : 5
                }]
            </db:input-parameters>
            <db:output-parameters>
                <db:output-parameter key="result1"/>
                <db:output-parameter key="result2"/>
            </db:output-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="returnNullValue">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ call returnNullValue(:s1, :s2, :result) }</db:sql>
            <db:input-parameters>
                #[{
                's1' : 'foo',
                's2' : 'bar'
                }]
            </db:input-parameters>
            <db:output-parameters>
                <db:output-parameter key="result"/>
            </db:output-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="concatenateStrings">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ call concatenateStrings(:s1, :s2, :result) }</db:sql>
            <db:input-parameters>
                #[{
                    's1' : 'foo',
                    's2' : 'bar'
                }]
            </db:input-parameters>
            <db:output-parameters>
                <db:output-parameter key="result"/>
            </db:output-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="callNotExistingStoredProcedureWithAnArgument">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ CALL doyouexists(:name) }</db:sql>
            <db:input-parameters>
                #[{ 'name' : 'mrstoredprocedure' }]
            </db:input-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="addOne">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ call mathFunction.addOne(:num) }</db:sql>
            <db:in-out-parameters>
                <db:in-out-parameter key="num" value="6"/>
            </db:in-out-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="callProcedureFormattedDate">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ call concatStringDate(:date, :text, :result) }</db:sql>
            <db:input-parameters>
                <![CDATA[#[%dw 2.0
                  output application/json
                  fun format(d: DateTime) = d as String {format: "yyyy-MM-dd HH:mm:ss"}
                  ---
                  {'date': format(|2019-10-31T13:00:00.000Z|),'text': 'today is '}
                ]]]>
            </db:input-parameters>
            <db:output-parameters>
                <db:output-parameter key="result" type="VARCHAR"></db:output-parameter>
            </db:output-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="callProcedureFormattedTimestamp">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ call concatStringTimestamp(:text, :timestamp, :result) }</db:sql>
            <db:input-parameters>
                <![CDATA[#[%dw 2.0
                  output application/json
                  fun format(d: DateTime) = d as String {format: "yyyy-MM-dd HH:mm:ss"}
                  ---
                  {'timestamp': format(|2019-10-31T13:00:00.000Z|), 'text': 'today is '}
                ]]]>
            </db:input-parameters>
            <db:output-parameters>
                <db:output-parameter key="result" type="VARCHAR"></db:output-parameter>
            </db:output-parameters>
        </db:stored-procedure>
    </flow>

    <flow name="callProcedureMultipleParameters">
        <db:stored-procedure config-ref="dbConfig">
            <db:sql>{ call getReducedBiography(:name, :birth_date, :place_birth, :died, :place_death, :profession, :alma_mater, :nationality, :children, :spouse, :mother, :father, :bio, :result) }</db:sql>
            <db:input-parameters>
                <![CDATA[#[%dw 2.0
                     output application/json
                     fun formatDate(d: DateTime) = d as String {format: "yyyy-MM-dd HH:mm:ss.SS"}
                     ---
                     {
                       'name': 'Dorothy Johnson Vaughan',
                       'birth_date': formatDate(|1910-09-20T13:00:00.000Z|),
                       'place_birth': 'Kansas City, Missouri',
                       'died': formatDate(|2008-11-10T13:00:00.000Z|),
                       'place_death': 'Hampton, Virginia',
                       'profession': 'Mathematician',
                       'alma_mater': 'Wilberforce University',
                       'nationality': 'American',
                       'children': 6,
                       'spouse': 'Howard Vaughan',
                       'mother': 'Annie Johnson',
                       'father': 'Leonard Johnson',
                       'bio': 'In 1943, Vaughan began a 28-year-career as a mathematician and programmer at Langley Research Center, in which she specialized in calculations for flight paths, the Scout Project, and FORTRAN computer programming. Her career in this field kicked off during the height of World War II. She came to the Langley Memorial Aeronautical Laboratory thinking that it would be a temporary war job. One of her children later worked at NASA.'
                     }
                ]]]>
            </db:input-parameters>
            <db:output-parameters>
                <db:output-parameter key="result" type="VARCHAR"></db:output-parameter>
            </db:output-parameters>
        </db:stored-procedure>
    </flow>
</mule>
